name: Run Enrichment Process

on:
  workflow_run:
    workflows: ["Check for new EPSS data"]
    types:
      - completed
  workflow_dispatch:

permissions:
  contents: write

jobs:
  publish:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.workflow_run.head_branch }}

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install -r code/requirements.txt

    - name: Grab Needed Data
      env:
        VULNCHECK_API_KEY: ${{ secrets.VULNCHECK_API_KEY }}
      run: |
        rm -f *.zip
        RESPONSE=$(curl --request GET \
          --url https://api.vulncheck.com/v3/backup/nist-nvd \
          --header 'Accept: application/json' \
          --header "Authorization: Bearer $VULNCHECK_API_KEY")
        url=$(echo "$RESPONSE" | jq -r '.data[0].url')
        curl -L -o nvd.zip $url
        unzip -o "*.zip"
        rm -f *.zip

    - name: Run Enrichment Process
      timeout-minutes: 60
      env:
        VULNCHECK_API_KEY: ${{ secrets.VULNCHECK_API_KEY }}
      run: |
        python -u code/process_nvd.py

    - name: setup git config
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "<>"

    - name: Generate tag
      id: generate_tag
      run: |
        echo "::set-output name=tag::v$(date +%Y.%m.%d)"

    - name: Commit and push if there are changes
      run: |
        git add cvss-bt.csv code/last_run.txt
        git commit -m "Updated CVSS-BT data $(date +%Y-%m-%d)" -a || exit 0
        git push origin HEAD:main
        git tag -a "$tag" -m "Updated CVSS-BT data $(date +%Y-%m-%d)"
        git push origin "$tag"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.generate_tag.outputs.tag }}
        release_name: "Release ${{ steps.generate_tag.outputs.tag }}"
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./cvss-bt.csv
        asset_name: cvss-bt.csv
        asset_content_type: text/plain
